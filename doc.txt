                                                    Major Project
- Phase 1
-- create folder major project
-- initialize package.json
-- create app.js

** setup backend (app.js)
-- require express, mongoose, ejs
-- create and connect to database
-- create REST API's for CRUD Operations
-- create models folder -> add models.js files in it so that it can be used in app.js to create models
-- it this file we define our schema and model.
-- export this model
-- require this model in app.js

** adding sample data in database
-- create init folder to initialize database with sample database
 --add data.js file in it and add sample data in it
 --this folder can also be used if clear our database and want to reinitialize it with sample data
 --add another file index.js
 --this file is used to insert sample data into the database
 --so it needs mongoose to connect to database, data.js file where sample data is present, listing.js to access collection
 --require mongoose, data.js, listing.js in it;
 --create database connection
 --now add sample data in the database
 --now run this file

**creating routes
-- create first route for /listings which shows all listings (index.ejs)
  --get   /listings
-- read:show route
  --get   /listings/:id  shows all data of a listing
-- new and create route
  --get   /listings/new  -> form -> submit
                                        |
  --post  /listings                   <-|

-- edit and update route
  --get   /listings/:id/edit  -> form -> submit
                                        |
  --put  /listings/:id                <-|

-- delete route
  --delete  /listings/:id        to delete a listing

**creating styling
-- install ejs-mate
   --create layouts folder in views directory
   --create boilerplate.ejs file to write common code for every file
   --write section that are not common as <%-body%>
   --removing common code from other files and add this file as <%layout(/layouts/boilerplate)%>
   --now for adding or changing things that are common to every file can be done in this file only
--create public folder 
 --create css folder in it 
  --create style.css file in css folder
  --link this file to boilerplate.ejs
--create includes folder in views folder
 --here various sections are added like navbar.ejs , footer.ejs to improve modularity of code
 --create navbar.ejs file and paste code of navbar from bootstrap in this file
 --include this file in other files <%- include("../includes/navbar.ejs")%>
 --create footer.ejs to add footer to every page and add styling to it
 --include this file in boilerplate

--using bootstrap for styling
 --copy css and js links to add it to boilerplate.ejs from bootstrap website

--using bootstrap validations in forms
 --adding novalide to turnoff default browser validations
 --add class needs-validation in form to use bootstrap validations
 --now it will display bootstrap validation messages or ui's
 --add invalid-feedback & valid-feedback classes to display custom messages for valid or invalid inputs

-- backend error handling
 --added utils(utility) folder where all error handling files , wrapAsync files, and other extra files are created.
 --created wrapAsync file in utils folder (wrapAsync is a function to use try catch block better)
 --export this function and require it in app.js
 --use this function in async routes to handle backend errors
 --added ExpressError.js file in utils to make custom error class 
 --they will throw custom errors
 --export this class
 --require the class in app.js
-- created error.ejs page in listings to serve error page on encountering error


-- creating Reviews Model
 -- it has comment (string), rating(1 to 5 - number), createdat(date,time)
 -- make reviews file in models folder and created reviews schema with above attributes
 -- create and export the model of reviews schema
 -- since we want to add reviws for individual listings, so we have to add them in listing schema
 -- now each listing can have reviews section
 -- since a listing can have many reviews so it has 1 to n  or one to many relationship with reviews
 -- require reviews file in listings file
 -- add review attribute in listing, set review with array
 -- it stores id of every review
 -- set it type to Schema.Types.ObjectId and ref to "Review"

--creating reviews section and adding functionalities
1...
 -- create review section in show.ejs as a form
 -- it is bcz user can give reviews to specific listings directly from their listing page
2... Submitting the form
 -- adding review to database
 -- POST   /listings/:id/reviews
 -- here id is of listing  , each listing has multiple reviews
 -- require review schema in app.js
 -- create POST route for reviews in app.js
 -- here we creating only post route for reviews because we only access reviews in listing
 -- first find listing using id in params, then store new review by accessing through req.body.review
 -- push the review in the listing array, then save new review then save listing

3... validations
 (a)Client Side Validation
 (b)Server side validation
  -- create joi schema for reviews form
  -- create schema validate function for joi schema in app.js
  -- pass this function as a middleware to app.post method for reviews
  -*- it is important to do above things so we can validate the body coming in request field

4... show reviews on listing page
  -- populate the listing in get route of listing/:id with reviews
  -- add reviews section in show page and display all reviews in it

5... styling reviews
  -- style the reviews section with bootstrap card class

6... deleting reviews
7... handling delete listing
  -- Here we are adding delete listing middleware in listing.js file
  -- if we delete a listing the reviews related to it, is also deleted